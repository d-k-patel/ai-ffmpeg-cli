name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

# Grant default token permissions for package publishing
permissions:
  contents: read
  packages: write

jobs:
  # Tests (Fast, Parallel)
  unit-tests:
    name: Tests - Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ['3.10', '3.11', '3.12', '3.13']
      fail-fast: false

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install ffmpeg
      shell: bash
      run: |
        if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
          sudo apt update && sudo apt install -y ffmpeg
        elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
          brew install ffmpeg
        fi

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]

    - name: Lint with ruff
      run: |
        ruff check src tests
        ruff format --check src tests

    - name: Type check with mypy
      run: mypy src --install-types --non-interactive

    - name: Run unit tests
      run: pytest -v --cov=ai_ffmpeg_cli --cov-report=xml --cov-report=term

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # Integration Tests (Medium Speed)
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    strategy:
      matrix:
        python-version: ['3.11', '3.12']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install ffmpeg
      run: sudo apt update && sudo apt install -y ffmpeg

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]

    - name: Create test media files
      run: |
        # Create test video file
        ffmpeg -f lavfi -i testsrc=duration=5:size=320x240:rate=1 -c:v libx264 test_video.mp4
        # Create test audio file
        ffmpeg -f lavfi -i sine=frequency=1000:duration=3 -c:a mp3 test_audio.mp3

    - name: Run integration tests
      run: pytest -v -m "integration" --cov=ai_ffmpeg_cli --cov-append --cov-report=xml

    - name: Test error scenarios
      run: |
        # Test with invalid API key
        OPENAI_API_KEY=invalid pytest -v tests/test_integration_errors.py
        # Test with missing ffmpeg (expected to fail)
        PATH="" pytest -v tests/test_integration_errors.py || true

  # End-to-End Tests (Slow, Comprehensive)
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    timeout-minutes: 30

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install ffmpeg
      run: sudo apt update && sudo apt install -y ffmpeg

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]

    - name: Setup test environment
      run: |
        # Create test directory structure
        mkdir -p test_media/{videos,audio,output}
        # Download sample media files
        curl -o test_media/videos/sample.mp4 https://sample-videos.com/zip/10/mp4/SampleVideo_1280x720_1mb.mp4 || true
        # Create fallback test files
        ffmpeg -f lavfi -i testsrc=duration=10:size=640x480:rate=1 -c:v libx264 test_media/videos/sample.mp4

    - name: Run E2E tests
      run: pytest -v -m "e2e" --timeout=300

    - name: Test performance benchmarks
      run: pytest -v tests/test_performance.py --benchmark-only

  # Security Tests
  security:
    name: Security Checks
    runs-on: ubuntu-latest
    env:
      SAFETY_API_KEY: ${{ secrets.SAFETY_API_KEY }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit[toml] semgrep

    - name: Run safety scan
      shell: bash
      run: |
        if [ -n "${SAFETY_API_KEY}" ]; then
          safety scan --key "${SAFETY_API_KEY}" --json
        else
          echo "SAFETY_API_KEY not set; falling back to 'safety check' (deprecated)"
          safety check --json
        fi

    - name: Run bandit security check
      run: bandit -r src/ -f json

    - name: Run semgrep security scan
      run: semgrep scan --config=auto --json

  # Performance Tests
  performance:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: e2e-tests

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install ffmpeg
      run: sudo apt update && sudo apt install -y ffmpeg

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]

    - name: Run performance benchmarks
      run: |
        pytest -v tests/test_performance.py --benchmark-only --benchmark-save=performance_results
        pytest-benchmark compare performance_results

    - name: Upload performance results
      uses: actions/upload-artifact@v4
      with:
        name: performance-results
        path: .benchmarks/

  # Load Testing
  load-test:
    name: Load Testing
    runs-on: ubuntu-latest
    needs: performance
    timeout-minutes: 15

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install ffmpeg
      run: sudo apt update && sudo apt install -y ffmpeg

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]

    - name: Run load tests
      run: |
        # Test concurrent operations
        python tests/load_test.py --concurrent=5 --duration=60
        # Test memory usage
        python tests/memory_test.py

  # Build and Publish
  build:
    name: Build Package
    needs: [unit-tests, integration-tests, e2e-tests, security, performance]
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: python -m build
    
    - name: Check package
      run: twine check dist/*
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  publish:
    name: Publish to PyPI
    needs: [build, load-test]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        skip-existing: true

  # Docker Build
  docker:
    name: Build Docker Image
    needs: [build, load-test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ghcr.io/${{ github.repository }}:latest
          ghcr.io/${{ github.repository }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
